<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pic.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzTjTzzzzzzzzzzzzzzzzzzzzzzzzzzzQ/wDcsc008888
        8888888888888888888o888888sb0888888888888888888888oc8888888838888888888888888888
        88X888888888q088888888888888888884X888888888088888888888888888888/8APPPPPPPPPPN/
        PPPPPPPPPPPPPPPPPPL/ADzzzzzzzzzzfzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzvzzzzzzzzzzzzzzz
        zzzyzzzzzzzzzzzzPzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzfzzzzzzzzzzzzzzzzzzzzfzzzzzzzzzJ
        3zzzzzzzzzzzzzzzzzzzyjLzzzzzzzgTzzzzzzzzzzzzzzzzzzzzzx1jDTzzhWzzzzzzzzzzzzzzzzzz
        zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzXzDXPTzzzzzzzzzzzzzzzzzzzzzzzmev7zzzwNTX
        zzzzzzzzzzzzzzzzzzzycfzzzzzzzzz5nzzzzzzzzzzzzzzzzzyBzzzzzzzzzzzzwvTzzzzzzzzzzzzz
        zyBzzzzzzzzzzzzzzw/zzzzzzzzzzzzzzjzzzzzzzzzzzzzzzyx3zzzzzzzzzzzzxPzzzzzzzzzzzzzz
        zzxzzzzzzzzzzzzznbzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzvzzzzzzzzzzzzzzzzzzwjzzzzzzzzzzy
        fzzzzzzzzzzzzzzzzzzyzzzzzzzzzzzz/wA888888888888888888i888888/8QAHxEAAQQBBQEAAAAA
        AAAAAAAAEQFAQVAAECAwYHAx/9oACAEDAQE/EPTjhfDBS/Oro/WgXkmgmgm1TjTvB2F2Nw0LYeNrQLQT
        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
</value>
  </data>
</root>